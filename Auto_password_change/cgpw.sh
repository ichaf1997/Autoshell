#!/bin/bash
# Generate random password and change automatically
# by Gopppog  - 2020.08.07

# Random password generate cmd
cmd="openssl rand -base64 24"

# Password length
length=20

# Ansible Hosts file path define
Host_path=""      # If equal "", Default values is "/etc/ansible/hosts"

# Load ansible hosts file
[ "$Host_path" == "" ] && Host_path="/etc/ansible/hosts"
[ ! -f $Host_path ] && echo "$Host_path missing. stop here" && exit 0
ip_list=$(cat $Host_path |egrep "^[0-9]"|awk 'BEGIN{ORS=" "} {print $1}')

# Generate random password
Generate(){
num=0
for IP in $ip_list;
do
    password=$($cmd)
    ip_arrary[num]=$IP
    passwd_arrary[num]=${password:0:$length}
    let num++
done
}

# Change password
Change(){
  ssh $1 "echo $2 | passwd --stdin root" > /dev/null 2>&1
  if [ $? -eq 0 ];then
     return 0
  else
     return 1
  fi
}

Help(){
         echo "Usage:$0"
         echo "Options:"
         echo "       -q: Accept new password generated by this script always"
         echo "       -g or --generate: Generate a random password and exit"
         echo "       -h or --help: show this message and exit"
         exit 0
}

# Main
timestamp=$(date +%Y%m%d_%H_%M_%S)
[ ! -d logs ] && mkdir logs
if [ $# -eq 1 ];then
   case $1 in
   --help|-h)
         Help
   ;;
   -q)
         Generate
         [ ! -f logs/$timestamp.txt ] && touch logs/$timestamp.txt
         for ((i=0;i<$num;i++));
         do
             Change ${ip_arrary[$i]} ${passwd_arrary[$i]}
             [ $? -eq 0 ] && sts=Success || sts=Failed
             echo host:${ip_arrary[$i]} password:${passwd_arrary[$i]} change_status:$sts>> logs/$timestamp.txt
         done
         exit 0
   ;;
   --generate|-g)
         password=$($cmd)
         echo ${password:0:$length}
         exit 0 
   ;;       
   *)    
         echo Unknow option \"$1\" . use -h or --help to get more information
         exit 0   
   esac
fi
if [ $# -lt 2 ];then
   Generate
   for ((j=0;j<$num;j++));
   do 
       echo host:${ip_arrary[$j]} password:${passwd_arrary[$j]}
   done
   read -p "Do you want to accept the new password ? [y or Y]" req
   case $req in
   y|Y)
        echo
   ;;
   *)   echo byebye
        exit 0
   esac
   [ ! -f logs/$timestamp.txt ] && touch logs/$timestamp.txt
   for ((i=0;i<$num;i++));
   do
       Change ${ip_arrary[$i]} ${passwd_arrary[$i]}
       [ $? -eq 0 ] && sts=Success || sts=Failed
       echo host:${ip_arrary[$i]} password:${passwd_arrary[$i]} change_status:$sts | tee -a logs/$timestamp.txt
   done
else
   echo Too more args provided . use -h or --help to get more information
   exit 0
fi
